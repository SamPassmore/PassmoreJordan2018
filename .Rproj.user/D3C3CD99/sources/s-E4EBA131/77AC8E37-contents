## Plotting maps for kin terminologies
## Output is an image
plot_map_region = function(longitude, latitude, cols, title = "", 
                           pacific_center = FALSE, kinterms, inset = -0.2){
  
  legend_cols = unique(cols)
  legend_names = unique(kinterms)
  
  if(pacific_center)
    longitude[longitude < 0] = longitude[longitude < 0] + 360
  
  
  plot_map(longitude = longitude, latitude = latitude, title = title,
           pacific_center = pacific_center)

  points(x = longitude, 
         y = latitude, 
         col = cols, 
         pch = 19)
  legend('topright',
         legend = legend_names,
         col = legend_cols,
         pch = 19,
         cex = 0.8,
         inset=c(inset,0),
         bty = "o",
         bg = '#BEBEBE66')
}

plot_map = function(longitude, latitude, title, pacific_center){
  library(maps)
  
  xlim = range(longitude) %>% 
    create_margins(.)
  ylim = range(latitude) %>% 
    create_margins(.)
  
  m = 'world'
  
  if(pacific_center){
    m = 'world2'
    xlim = range(longitude) %>% 
      create_margins(.)
  }
  
  map(m, fill = TRUE, 
      interior = FALSE,
      boundary = FALSE,
      col = "grey", 
      lty = 0, 
      bg = "lightblue", 
      xlim = xlim, 
      ylim = ylim)
  title(main = title)
  
}

## Helper function which defines the margins of the plot
create_margins = function(x, percent = 0.1){
  c(
    margin_change_left(x[1], percent = percent),
    margin_change_right(x[2], percent = percent)
  )
}

## Helper function which defines the RHS margins of the plot
margin_change_right = function(x, percent){
  if(x >= 0)
    x = x * (1 + percent)
  if(x <= 0)
    x = x * (1 - percent)
  x
}

## Helper function which defines the LHS margins of the plot
margin_change_left = function(x, percent){
  if(x >= 0)
    x = x * (1 - percent)
  if(x <= 0)
    x = x * (1 + percent)
  x
}

## Plots a pretty phylogenetic tree

special_plot = function(x, tree, fit, offset = 0.05, cex = 0.7, tip.cex = 0.3, node.cex = 0.8, direction = "rightwards", colours = NULL){
  library(RColorBrewer)
  
  plot(tree,
       cex = cex, label.offset = offset,
       font = 1, direction = direction)
  
  if(is.null(colours)){
    colours = brewer.pal(9, 'Set1')
    cols<-setNames(colours[1:length(unique(x))],sort(unique(x)))
  }else{
    cols = colours$color
    names(cols) = colours$terminology
    cols = cols[names(cols) %in% unique(x)]
  }
  
  nodelabels(node=1:tree$Nnode+Ntip(tree),
             pie=fit$lik.anc, piecol=cols,cex=node.cex)
  tiplabels(pie=to.matrix(x,sort(unique(x))),piecol=cols,cex=tip.cex)
  add.simmap.legend(colors=cols,prompt=FALSE,x=0.9*par()$usr[1],
                    y=-max(nodeHeights(austro$tree)),fsize=0.8)
}

#tiplabels(pie = to.matrix(x = variable, seq = LETTERS[1:5]), piecol = cols_vector)
## Assigns kin-terms to colours 
kinship_to_colours = function(codes){
  library(plyr)
  mapvalues(codes, from = 1:8, 
            to = c(
              "#E41A1C",
              "#377EB8",
              "#4DAF4A", 
              "#984EA3",
              "#FF7F00",
              "#FFFF33", 
              "#A65628",
              "#F781BF"
            )
  )
}


plotting_ace = function(variable, tree, fit, tip.cex = 0.3, node.cex = 0.8){
  cols = setNames(palette()[1:length(unique(variable))],sort(unique(variable)))
  #cols = setNames(unique(obj$data$KinColours), unique(obj$data$Nice_Kinterms))
  nodelabels(node=1:tree$Nnode+Ntip(tree),
             pie=fit$lik.anc,cex=node.cex)
  tiplabels(pie=to.matrix(variable,sort(unique(variable))),cex=tip.cex)
  #add.simmap.legend(prompt=FALSE,x=0.9*par()$usr[1],
  #                  y=max(nodeHeights(tree)) * 200,fsize=1.5)

}
