hist_data = an[,idx_rates] %>% gather()
ggplot(gather(hist_data), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
apply(an[,idx_rates], 2, summary)
# top 10 frequent models
an$`Model string` %>%
table() %>%
sort(decreasing = TRUE) %>%
head(., 10)
bt = read.bayestraits('results/anc-state/bantu/26-Oct-2017-09_53.Log.txt')
plot(bt$Lh, type = 'l')
bt_ms = modelstring_frequencies(tail(bt, 10000))
bt = read.bayestraits('results/anc-state/bantu/scale_trees1.Log.txt')
plot(bt$Lh, type = 'l')
bt_ms = modelstring_frequencies(tail(bt, 10000))
write.csv(bt_ms, 'results/transition-rates/bantu-st.csv')
bt$`Model string` %>%
table() %>%
sort(decreasing = TRUE) %>%
head(., 10)
#ua = read.bayestraits('results/anc-state/utoaztecan/26-Oct-2017-09_54.Log.txt')
ua = bt_read.log('results/anc-state/utoaztecan/scale_trees1.Log.txt')
plot(ua$output$Lh, type = 'l')
plot(ua$Lh, type = 'l')
ua_ms = modelstring_frequencies(tail(ua$output, 10000))
ua_ms = modelstring_frequencies(tail(ua, 10000))
write.csv(ua_ms, 'results/transition-rates/utoaztecan-st.csv')
ua$`Model string` %>%
table() %>%
sort(decreasing = TRUE) %>%
head(., 10)
an_log = bt_read.log('results/anc-state/austronesian/scale_trees1.Log.txt')
idx = str_detect(colnames(an_log$output), "q")
rates = apply(an_log$output[,idx], 2, median)
idx = str_detect(colnames(an_log), "q")
rates = apply(an_log$output[,idx], 2, median)
rates = apply(an_log[,idx], 2, median)
rates
mean(an_log$`Global Rate`)
attributes(an_log)$settings
attributes(an_log)$settings$`Scale Tree:`
as.numeric(attributes(an_log)$settings$`Scale Tree:`)
conversion = as.numeric(attributes(an_log)$settings$`Scale Tree:`)
mean(an_log$`Global Rate`) / conversion
#devtools::install_github('SamPassmore/excdr')
library(bayestraitr)
library(stringr)
library(ape)
an_log = bt_read.log('results/anc-state/austronesian/scale_trees1.Log.txt')
idx = str_detect(colnames(an_log), "q")
rates = apply(an_log[,idx], 2, median)
conversion = as.numeric(attributes(an_log)$settings$`Scale Tree:`)
mean(an_log$`Global Rate`) / conversion
# The trees used in this analyses stated out as
# 1 = 1000 years
# And then were divided by a constant of 100 so
# 1 = 10 000
# To get this to 1 = 1 year we would need to multiply by 1000 * 100
constant = 1000 * 100
# Email from A. Meade says as branch lengths are doubled, rates are halved
# In this case branch lengths have been reduced by constant, therefore rates should increase by that constant
# So to get rates to equate to branch lengths they need to be divided by the constant and then multiplied by years?
sort((rates / constant) * 10000)
## AN important rates are Eskimo to Hawaiian (34) &
# Hawaiian to Iroquois (45)
sort((rates / constant) * 10000)[c("q34", "q45")]
## Bantu there were no important transistion (but have a look anyway)
bt_log = read.bayestraits('results/anc-state/bantu/05-Sep-2017-16_52.Log.txt')
bt_tr = read.nexus('data/anc-state/bantu.bttrees')
bt_tr$tree.555480000.61472.749694$edge.length %>% max(.)
bt_dplace = read.nexus('https://raw.githubusercontent.com/D-PLACE/dplace-data/master/phylogenies/dunn_et_al2011_utoaztecan/posterior.trees')
# original tree is 1 = 100 years
# the is divided by 100
# so constant is
constant = 100 * 100
idx = str_detect(colnames(bt_log), "q")
rates = apply(bt_log[,idx], 2, median)
sort((rates / constant) * 10000)
## UA important rates were Hawaiian to Iroquois (45),
# Hawaiian to Eskimo (43) & Hawaiian to Crow (41)
#ua_log = bt_read.log('results/anc-state/utoaztecan/05-Sep-2017-16_52.Log.txt')
ua_log = bt_read.log('../terminology-anc-state/bt-output/utoaztecan/.Log.txt')
#ua_tr = read.nexus('data/anc-state/utoaztecan.bttrees')
ua_tr = read.nexus('../terminology-anc-state/data/utoaztecan-2.bttrees')
ua_dplace = read.nexus('https://raw.githubusercontent.com/D-PLACE/dplace-data/master/phylogenies/dunn_et_al2011_utoaztecan/posterior.trees')
# If I use the new analyses w/ the DPLACE tree
# The dplace tree is
# 1 = 1000 years
# Then I divided by 100 so
# 1 = 10 000 years
# So to go back
constant = 100 * 1000
idx = str_detect(colnames(ua_log$output), "q")
rates = apply(ua_log$output[,idx], 2, median)
sort((rates / constant) * 10000) %>% sort(.)
sort((rates / constant) * 10000)[c("q45", "q43", "q41")] %>%
sort(.)
plot(ua_log$output$`Global Rate` %>% sort(.))
median(ua_log$output$`Global Rate` / constant) * 10000
bt_log = read.bayestraits('results/anc-state/bantu/scale_trees1.Log.txt')
## UA important rates were Hawaiian to Iroquois (45),
# Hawaiian to Eskimo (43) & Hawaiian to Crow (41)
ua_log = bt_read.log('results/anc-state/utoaztecan/scale_trees1.Log.txt')
conversion = as.numeric(attributes(bt_log)$settings$`Scale Tree:`)
mean(bt_log$`Global Rate`) / conversion
mean(bt_log$`Global Rate`)
as.numeric(attributes(bt_log)$settings$`Scale Tree:`)
attributes(bt_log)$settings
bt_read.log('results/anc-state/bantu/scale_trees1.Log.txt')
bt_log = bt_read.log('results/anc-state/bantu/scale_trees1.Log.txt')
conversion = as.numeric(attributes(bt_log)$settings$`Scale Tree:`)
mean(bt_log$`Global Rate`) / conversion
conversion = as.numeric(attributes(ua_log)$settings$`Scale Tree:`)
mean(ua_log$`Global Rate`) / conversion
conversion
as.numeric(attributes(bt_log)$settings$`Scale Tree:`)
folders = paste0('results/anc-state/', c('austronesian', 'bantu', 'utoaztecan'))
gelmanrubin_table = matrix(NA, ncol = 2, nrow = 3,
dimnames = list(basename(folders),
c("Point est.", "Upper C.I.")))
f = folders[1]
files = list.files(path = f, pattern = "*.Log.txt", full.names = TRUE)
logs = map(files, bt_read.log)
roots = map(logs, function(l){
root_cols = str_detect(colnames(l),
"(^Lh)|(^Root)|(^Global Rate)")
root = l[,root_cols] %>% colMeans()
round(root, 3)
}) %>%
do.call(rbind, .)
idx = str_detect(colnames(roots), "Root")
old_names = colnames(roots)[idx] %>%
str_extract("[0-9]") %>%
as.numeric()
new_names = kincodes[kincodes$V1 %in% old_names,2]
colnames(roots)[idx] = as.character(new_names)
roots = rbind(roots, colMeans(roots))
rownames(roots) = c(1:3, "Mean")
# gelman-rubin statistic
all_mcmc = mcmc.list(map(logs, function(x) as.mcmc(x$Lh)))
d1 = gelman.diag(all_mcmc)
rownames(d1$psrf) = basename(f)
gelmanrubin_table[basename(f),] = d1$psrf
one = bt_read.log('results/anc-state/bantu/scale_trees1.Log.txt')
two = bt_read.log('results/anc-state/bantu/scale_trees2.Log.txt')
three = bt_read.log('results/anc-state/bantu/scale_trees3.Log.txt')
plot(one$Lh, type = 'l')
lines(two$Lh, col = "red")
lines(three$Lh, col = "blue")
plot(density(two$Lh), type = 'l')
lines(density(one$Lh), col = "red")
lines(density(three$Lh), col = "blue")
library(coda)
library(purrr)
logs = list(one, two, three)
all_mcmc = mcmc.list(map(logs, function(x) as.mcmc(x$Lh)))
d1 = gelman.diag(all_mcmc)
plot(density(two$Lh), type = 'l')
lines(density(one$Lh), col = "red")
lines(density(three$Lh), col = "blue")
# get three runs of BayesTraits logs
files_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Log.txt")
files_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*.Log.txt")
files_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Log.txt")
# Get the corresponding runs of BayesTraits Stones
stones_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Stones.txt")
stones_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*Stones.txt")
stones_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Stones.txt")
hypotheses = m$job[i] %>%
as.character()
hypotheses
# find the right files
# This is ithe dependent and independent models for each hypotheses
idx = str_detect(files_1, hypotheses)
f1 = files_1[idx]
idx = str_detect(files_2, hypotheses)
f2 = files_2[idx]
idx = str_detect(files_3, hypotheses)
f3 = files_3[idx]
# load the files
logs = map(list(f1,f2,f3),
function(f) map(f, bt_read.log))
if(!all(map(logs, length) == 2)) next # still need to finish up some results
dep_transitions = map(logs, function(l){
l = l[[1]]
transition_cols = str_detect(colnames(l), "(^q)|(^(alpha|beta))")
#transition = l[,transition_cols] %>% colMeans()
transition = l[,transition_cols] %>% apply(., 2, median)
round(transition, 3)
})
indep_transitions = map(logs, function(l){
l = l[[2]]
transition_cols = str_detect(colnames(l), "(^q)|(^(alpha[1,2]|beta[1,2]))")
transition = l[,transition_cols] %>% apply(., 2, median)
round(transition, 3)
})
# find the right stones files
# this is one for the dependent and one for the independent model
idx = str_detect(stones_1, hypotheses)
s1 = stones_1[idx]
idx = str_detect(stones_2, hypotheses)
s2 = stones_2[idx]
idx = str_detect(stones_3, hypotheses)
s3 = stones_3[idx]
s1 = lapply(s1, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
s2 = lapply(s2, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
s3 = lapply(s3, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
stone_logs = list(s1,s2,s3)
dep_table = data.frame(run = 1:3,
dependent.MLL = map_dbl(stone_logs, 1) %>% round(., 3),
dependent.transitions = do.call(rbind, dep_transitions)
)
indep_table = data.frame(independent.MLL = map_dbl(stone_logs, 2) %>% round(., 3),
independent.transitions = do.call(rbind, indep_transitions)
)
table = cbind(dep_table, indep_table)
table
2 * (s1[[1]] - s1[[2]])
# find the right stones files
# this is one for the dependent and one for the independent model
idx = str_detect(stones_1, hypotheses)
s1_f = stones_1[idx]
idx = str_detect(stones_2, hypotheses)
s2_f = stones_2[idx]
idx = str_detect(stones_3, hypotheses)
s3_f = stones_3[idx]
# find the right stones files
# this is one for the dependent and one for the independent model
idx = str_detect(stones_1, hypotheses)
s1_f = stones_1[idx]
idx = str_detect(stones_2, hypotheses)
s2_f = stones_2[idx]
idx = str_detect(stones_3, hypotheses)
s3_f = stones_3[idx]
s1 = lapply(s1_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
s2 = lapply(s2_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
s3 = lapply(s3_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
stone_logs = list(s1,s2,s3)
dep_table = data.frame(run = 1:3,
dependent.MLL = map_dbl(stone_logs, 1) %>% round(., 3),
dependent.transitions = do.call(rbind, dep_transitions)
)
indep_table = data.frame(independent.MLL = map_dbl(stone_logs, 2) %>% round(., 3),
independent.transitions = do.call(rbind, indep_transitions)
)
table = cbind(dep_table, indep_table)
table = rbind(table, round(colMeans(table), 3))
BF = 2 * (s1[[1]] - s1[[2]])
s1_f
s2_f
s1[[1]]
s1
library(dplyr)
library(circlize)
library(RColorBrewer)
library(paletteer)
library(stringr)
source('figures/figure-helper.R')
kincodes = read.csv('data/kincodes', header = FALSE, stringsAsFactors = FALSE)
kincodes$cols = kinship_to_colours(kincodes$V1)
kincodes = kincodes[c(-2,-8),]
files = list.files('results/transition-rates/', pattern = "-st.csv", full.names = TRUE)
transition_matrix = list()
for(i in seq_along(files)){
t = read.csv(files[i])
colnames(t) = c("transition", 1:(ncol(t)-2), "Z")
transitions = t[,2:ncol(t)]
nonzero = rowSums(transitions[,-ncol(transitions)], na.rm = TRUE)
percent = transitions$Z / rowSums(transitions, na.rm = TRUE)
t2 = data.frame(transition = t$transition,
parameterized = nonzero,
zero = transitions$Z,
percentage = percent)
t2 = t2[order(t2$percentage, decreasing = FALSE),]
rownames(t2) = NULL
transition_matrix[[i]] = t2
}
transition_matrix[[1]]$family = "austronesian"
transition_matrix[[2]]$family = "bantu"
transition_matrix[[3]]$family = "uto"
transition_matrix = do.call(rbind, transition_matrix)
set.seed(123)
data = data.frame(
factor = rep(kincodes$V2, each = 10),
x = rnorm(60),
y = runif(60, min = 79, max = 81)
)
data = left_join(data, kincodes, by = c("factor" = "V2"))
# Initialize the plot.
#cols = paletteer_d('palettetown', palette = 'quilava', n = 4)[2:4]
cols = c("black", "blue", "gray")
settings = data.frame(family = c("austronesian", "bantu", "uto"),
cols = cols,
height = c(5, 7.5, 10),
begin = c(0.65, 0.75, 0.85),
arrival = c(0.15, 0.25, 0.35))
rownames(settings) = settings$family
pdf('figures/transition-network2.pdf')
par(mar = c(1, 1, 1, 1))
circos.par("points.overflow.warning" = FALSE)
circos.initialize(factors = data$factor, xlim = c(0, 1))
# Build the regions of track #1
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
pos = circlize:::polar2Cartesian(circlize(CELL_META$xcenter, CELL_META$ycenter))
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[1] + uy(2, "mm"),
CELL_META$sector.index, facing = "bending.inside", niceFacing = TRUE, cex = 1.5)
}, bg.border = 1, track.height = 0.15, bg.col = unique(data$cols))
add = 0
family = ""
# Add a link between a point and another
# transition_matrix = transition_matrix %>%
#   filter(family == "bantu")
for(i in 1:nrow(transition_matrix)){
transition = transition_matrix$transition[i] %>%
str_extract_all("[0-9]") %>%
unlist()
terminologies = kincodes[(transition),"V2"]
if(family != transition_matrix$family[i])
add = 0
family = transition_matrix$family[i]
colour = settings[family,"cols"] %>% as.character()
height = settings[family,"height"] %>% as.numeric()
start = settings[family,"begin"] %>% as.numeric()
arrive = settings[family,"arrival"] %>% as.numeric()
rate = 1 - transition_matrix$percentage[i]
if(rate > .9){
circos.link(sector.index1 = terminologies[1], start + add, sector.index2 = terminologies[2], arrive + add,
col = colour, lwd = rate * 5, arr.width = 0.4, h = height,
directional = 1)
add = add + 0.05
print(rate)
}
}
dev.off()
library(dplyr)
library(circlize)
library(RColorBrewer)
library(paletteer)
library(stringr)
source('figures/figure-helper.R')
kincodes = read.csv('data/kincodes', header = FALSE, stringsAsFactors = FALSE)
kincodes$cols = kinship_to_colours(kincodes$V1)
kincodes = kincodes[c(-2,-8),]
files = list.files('results/transition-rates/', pattern = "-st.csv", full.names = TRUE)
transition_matrix = list()
for(i in seq_along(files)){
t = read.csv(files[i])
colnames(t) = c("transition", 1:(ncol(t)-2), "Z")
transitions = t[,2:ncol(t)]
nonzero = rowSums(transitions[,-ncol(transitions)], na.rm = TRUE)
percent = transitions$Z / rowSums(transitions, na.rm = TRUE)
t2 = data.frame(transition = t$transition,
parameterized = nonzero,
zero = transitions$Z,
percentage = percent)
t2 = t2[order(t2$percentage, decreasing = FALSE),]
rownames(t2) = NULL
transition_matrix[[i]] = t2
}
transition_matrix[[1]]$family = "austronesian"
transition_matrix[[2]]$family = "bantu"
transition_matrix[[3]]$family = "uto"
transition_matrix = do.call(rbind, transition_matrix)
set.seed(123)
data = data.frame(
factor = rep(kincodes$V2, each = 10),
x = rnorm(60),
y = runif(60, min = 79, max = 81)
)
data = left_join(data, kincodes, by = c("factor" = "V2"))
# Initialize the plot.
#cols = paletteer_d('palettetown', palette = 'quilava', n = 4)[2:4]
cols = c("black", "blue", "gray")
settings = data.frame(family = c("austronesian", "bantu", "uto"),
cols = cols,
height = c(5, 7.5, 10),
begin = c(0.65, 0.75, 0.85),
arrival = c(0.15, 0.25, 0.35))
rownames(settings) = settings$family
pdf('figures/transition-network2.pdf')
par(mar = c(1, 1, 1, 1))
circos.par("points.overflow.warning" = FALSE)
circos.initialize(factors = data$factor, xlim = c(0, 1))
# Build the regions of track #1
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
pos = circlize:::polar2Cartesian(circlize(CELL_META$xcenter, CELL_META$ycenter))
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[1] + uy(2, "mm"),
CELL_META$sector.index, facing = "bending.inside", niceFacing = TRUE, cex = 1.5)
}, bg.border = 1, track.height = 0.15, bg.col = unique(data$cols))
add = 0
family = ""
# Add a link between a point and another
# transition_matrix = transition_matrix %>%
#   filter(family == "bantu")
for(i in 1:nrow(transition_matrix)){
transition = transition_matrix$transition[i] %>%
str_extract_all("[0-9]") %>%
unlist()
terminologies = kincodes[(transition),"V2"]
if(family != transition_matrix$family[i])
add = 0
family = transition_matrix$family[i]
colour = settings[family,"cols"] %>% as.character()
height = settings[family,"height"] %>% as.numeric()
start = settings[family,"begin"] %>% as.numeric()
arrive = settings[family,"arrival"] %>% as.numeric()
rate = 1 - transition_matrix$percentage[i]
if(rate > .95){
circos.link(sector.index1 = terminologies[1], start + add, sector.index2 = terminologies[2], arrive + add,
col = colour, lwd = rate * 5, arr.width = 0.4, h = height,
directional = 1)
add = add + 0.05
print(rate)
}
}
dev.off()
13.5 / 11
library(dplyr)
library(circlize)
library(RColorBrewer)
library(paletteer)
library(stringr)
source('figures/figure-helper.R')
kincodes = read.csv('data/kincodes', header = FALSE, stringsAsFactors = FALSE)
kincodes$cols = kinship_to_colours(kincodes$V1)
kincodes = kincodes[c(-2,-8),]
files = list.files('results/transition-rates/', pattern = "-st.csv", full.names = TRUE)
transition_matrix = list()
for(i in seq_along(files)){
t = read.csv(files[i])
colnames(t) = c("transition", 1:(ncol(t)-2), "Z")
transitions = t[,2:ncol(t)]
nonzero = rowSums(transitions[,-ncol(transitions)], na.rm = TRUE)
percent = transitions$Z / rowSums(transitions, na.rm = TRUE)
t2 = data.frame(transition = t$transition,
parameterized = nonzero,
zero = transitions$Z,
percentage = percent)
t2 = t2[order(t2$percentage, decreasing = FALSE),]
rownames(t2) = NULL
transition_matrix[[i]] = t2
}
transition_matrix[[1]]$family = "austronesian"
transition_matrix[[2]]$family = "bantu"
transition_matrix[[3]]$family = "uto"
transition_matrix = do.call(rbind, transition_matrix)
set.seed(123)
data = data.frame(
factor = rep(kincodes$V2, each = 10),
x = rnorm(60),
y = runif(60, min = 79, max = 81)
)
data = left_join(data, kincodes, by = c("factor" = "V2"))
# Initialize the plot.
#cols = paletteer_d('palettetown', palette = 'quilava', n = 4)[2:4]
cols = c("black", "blue", "gray")
settings = data.frame(family = c("austronesian", "bantu", "uto"),
cols = cols,
height = c(5, 7.5, 10),
begin = c(0.65, 0.75, 0.85),
arrival = c(0.15, 0.25, 0.35))
rownames(settings) = settings$family
pdf('figures/transition-network2.pdf')
par(mar = c(1, 1, 1, 1))
circos.par("points.overflow.warning" = FALSE)
circos.initialize(factors = data$factor, xlim = c(0, 1))
# Build the regions of track #1
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
pos = circlize:::polar2Cartesian(circlize(CELL_META$xcenter, CELL_META$ycenter))
circos.text(CELL_META$xcenter, CELL_META$cell.ylim[1] + uy(2, "mm"),
CELL_META$sector.index, facing = "bending.inside", niceFacing = TRUE, cex = 1.5)
}, bg.border = 1, track.height = 0.15, bg.col = unique(data$cols))
add = 0
family = ""
# Add a link between a point and another
# transition_matrix = transition_matrix %>%
#   filter(family == "bantu")
for(i in 1:nrow(transition_matrix)){
transition = transition_matrix$transition[i] %>%
str_extract_all("[0-9]") %>%
unlist()
terminologies = kincodes[(transition),"V2"]
if(family != transition_matrix$family[i])
add = 0
family = transition_matrix$family[i]
colour = settings[family,"cols"] %>% as.character()
height = settings[family,"height"] %>% as.numeric()
start = settings[family,"begin"] %>% as.numeric()
arrive = settings[family,"arrival"] %>% as.numeric()
rate = 1 - transition_matrix$percentage[i]
if(rate > .9){
circos.link(sector.index1 = terminologies[1], start + add, sector.index2 = terminologies[2], arrive + add,
col = colour, lwd = rate * 5, arr.width = 0.4, h = height,
directional = 1)
add = add + 0.05
print(rate)
}
}
dev.off()
