idx = str_detect(files_3, hypotheses)
f3 = files_3[idx]
# load the files
logs = map(list(f1,f2,f3),
function(f) map(f, bt_read.log))
!all(map(logs, length) == 2)
length(logs)
map(logs, length)
# get three runs of BayesTraits logs
files_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Log.txt")
files_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*.Log.txt")
files_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Log.txt")
# Get the corresponding runs of BayesTraits Stones
stones_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Stones.txt")
stones_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*Stones.txt")
stones_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Stones.txt")
hypotheses = m$job[i] %>%
as.character()
# find the right files
# This is ithe dependent and independent models for each hypotheses
idx = str_detect(files_1, hypotheses)
f1 = files_1[idx]
idx = str_detect(files_2, hypotheses)
f2 = files_2[idx]
idx = str_detect(files_3, hypotheses)
f3 = files_3[idx]
# load the files
logs = map(list(f1,f2,f3),
function(f) map(f, bt_read.log))
!all(map(logs, length) == 2)
install.packages('cranlogs')
library(excdr)
library(stringr)
library(dplyr)
library(tidyr)
modelstring_frequencies = function(results){
# get column names
cn_results = colnames(results)
# find transition columns
#q = results[,str_detect(cn_results, "q")]
# get model string and seperate it out
ms = results$`Model string` %>%
str_remove('[\']') %>%
trimws() %>%
str_split('\\s') %>%
do.call(rbind, .)
# then get counts of estimates for each parameter
ms2 = list()
for(i in 1:ncol(ms)){
ms2[[i]] = table(ms[,i])
}
# possible states for this lang-fam
states = lapply(ms2, names) %>%
unlist() %>%
unique() %>%
sort()
# build a matrix of posible states
occurances = matrix(NA, nrow = length(ms2), ncol = length(states))
dimnames(occurances) = list(cn_results[str_detect(cn_results, "q")], states)
# fill matrix
for(i in seq_along(ms2)){
row = ms2[[i]]
occurances[i,names(row)] = row
}
occurances
}
an = read.bayestraits(filename = 'results/anc-state/austronesian/scale_trees1.Log.txt')
# check mcmc chain
plot(tail(an$Lh, 10000), type = 'l')
# seems fine
an_ms = modelstring_frequencies(tail(an, 10000))
# get the rates
idx_rates = str_detect(colnames(an), "q")
hist_data = an[,idx_rates] %>% gather()
ggplot(gather(hist_data), aes(value)) +
geom_histogram(bins = 10) +
facet_wrap(~key, scales = 'free_x')
# top 10 frequent models
an$`Model string` %>%
table() %>%
sort(decreasing = TRUE) %>%
head(., 10)
options(scipen=999)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warnings = FALSE)
library(knitr)
library(kableExtra)
library(stringr)
library(dplyr)
library(coda)
library(purrr)
#library(excdr)
library(psych)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(reshape2)
library(bayestraitr)
source('processing/helper.R')
kincodes = read.csv('data/kincodes', header = FALSE)
files = list.files('data/anc-state', pattern = '*.btdata',
full.names = TRUE)
d = suppressWarnings(purrr::map(files, read.table))
t = lapply(d, nrow) %>%
unlist() %>%
matrix(., ncol = 1)
dimnames(t) = list(c("Austronesian", "Bantu", "Uto-Aztecan"), "Count")
kable(t,
caption = "Table S1: Count of societies in signal test and ancestral state analyses, by language family",
format = 'html') %>%
kable_styling()
# summary info
summary = readxl::read_xlsx('../terminology-coevolution2/summary-results.xlsx', sheet = "all")
# data count info
files = list.files('data/co-evo/', pattern = "*.btdata", full.names = TRUE)
d = purrr::map(files, read.table)
t = lapply(d, nrow) %>%
unlist() %>%
data.frame(count = .)
t$id = basename(files) %>%
tools::file_path_sans_ext(.)
t$id2 = str_remove(t$id, "(austronesian|bantu|uto)-")
t$lf = str_extract(t$id, "(austronesian|bantu|uto)")
t2 = dcast(t, id2~lf, value.var = "count")
t2 = apply(t2, 2, function(x) ifelse(is.na(x), "", x)) %>%
data.frame()
summary = suppressWarnings(left_join(summary, t2, by = "id2"))
s = summary %>%
select(terminology, t.question.code, t.value.code, `social structure`,
ss.question.code, ss.value.code, austronesian.y, bantu.y, uto)
s = s[order(s$terminology),]
s = s[,]
kable(s, col.names =
c("terminology", "question code", "value code", "social structure",
"question code", 'value code', 'AN counts', 'BT counts', 'UA counts'),
caption = "Table S2: Data coding taken from D-PLACE & Co-evolutionary analyses data counts", format = 'html') %>%
kable_styling(full_width = TRUE)
quotes = read.csv('figures/hypothesis-table.csv')
kable(quotes,
caption = "Table S3: hypotheses with quotes, references and page numbers", format = 'html') %>%
kable_styling(full_width = TRUE)
signal_files = list.files('results/signal-results/',
pattern = "mean.csv",
full.names = TRUE)
idx = !str_detect(signal_files, "ie") # leave IE for now
signal_files = signal_files[idx]
results_lang = map(signal_files, read.csv)
results = do.call(rbind, results_lang)
# make the names nice
results$X = str_remove(results$X, "name")
caption = "Table S3: Signal tests for each terminology within each langauge family. Columns 2 & 3 indicate the presence and absence of a terminology. Columns 4 to 6 are outputs from the D-statistic test. Columns 7 to 21 are output from Mantel tests. P-values and bonferonni corrected values shown"
c.names = c("Terminology", "Absent", "Present", "D", "Prob. Brownian", "Prob. Random", "Z-stat", "p-value","bonf-p", "Z-stat", "p-value", "bonf-p", "Z-stat", "p-value", "bonf-p", "Statistic", "p-value", "bonf-p", "Statistic", "p-value", "bonf-p")
results = results[,c(1:12,16:18,13:15,19:21)]
groups = sapply(results_lang, nrow) %>%
cumsum()
print(
results %>%
kable(format = 'html', col.names = linebreak(c.names),
caption = caption, digits = 3) %>%
kable_styling(bootstrap_options =
c("striped", "bordered")) %>%
group_rows("Austronesian", 1, groups[1]) %>%
group_rows("Bantu", groups[1]+1, groups[2]) %>%
group_rows("Uto-Aztecan", groups[2]+1, groups[3]) %>%
add_header_above(c(" " = 3, "D-statistic" = 3,
"Geography" = 3, "Log-Geography" = 3,
"Phylogeny" = 3, "Log-Geo + Phy" = 3,
"Phy + Log Geo" = 3)) %>%
add_header_above(c(" " = 6, "Mantel" = 9,
"Partial Mantel" = 6)))
results
?group_rows
print(
results %>%
kable(format = 'html', col.names = linebreak(c.names),
caption = caption, digits = 3) %>%
kable_styling(bootstrap_options =
c("striped", "bordered")) %>%
kableExtra::group_rows("Austronesian", 1, groups[1]) %>%
kableExtra::group_rows("Bantu", groups[1]+1, groups[2]) %>%
kableExtra::group_rows("Uto-Aztecan", groups[2]+1, groups[3]) %>%
add_header_above(c(" " = 3, "D-statistic" = 3,
"Geography" = 3, "Log-Geography" = 3,
"Phylogeny" = 3, "Log-Geo + Phy" = 3,
"Phy + Log Geo" = 3)) %>%
add_header_above(c(" " = 6, "Mantel" = 9,
"Partial Mantel" = 6)))
library(bayestraitr)
x = bt_read.log('results/anc-state/austronesian/scale_trees1.Log.txt')
nrow(x)
10^9
(10^9 - 50000)/10000
(10^9 - 10000)/50000
kincodes
files = list.files('results/transition-rates/',
pattern = "-st.csv", full.names = TRUE)
f = files[1]
f
t = read.csv(f)
colnames(t) = c("transition", 1:(ncol(t)-2), "Z")
transitions = t[,2:ncol(t)]
nonzero = rowSums(transitions[,-ncol(transitions)], na.rm = TRUE)
percent = transitions$Z / rowSums(transitions, na.rm = TRUE)
t$transition
t$transition2 = str_replace(t$transition, kincodes[,1], kincodes[,2])
str_replace(t$transition, c(kincodes[,1]), c(kincodes[,2]))
str_replace(t$transition,
as.character(kincodes[,1]),
c(kincodes[,2]))
str_replace(t$transition,
as.character(kincodes[,1]),
as.character(kincodes[,2]))
str_replace_all(t$transition,
as.character(kincodes[,1]),
as.character(kincodes[,2]))
str_replace_all(t$transition[1],
as.character(kincodes[,1]),
as.character(kincodes[,2]))
t$transition[1]
new_names = outer(kincodes[,2], kincodes[,2],
function(x,y) paste(x, y, sep = " -> "))
new_names
new_names = outer(kincodes[,2], kincodes[,2],
function(x,y) paste(x, y, sep = " -> ")) %>%
c()
new_names
new_names = data.frame(
value = outer(kincodes[,1], kincodes[,1],
function(x,y) paste("q", x, y, sep = "")) %>%
c(),
label = outer(kincodes[,2], kincodes[,2],
function(x,y) paste(x, y, sep = " -> ")) %>%
c()
)
head(new_names)
colnames(t)
t = left_join(t, new_names, by = c("transition" = "value"))
head(t)
t2 = data.frame(transition = t$label,
parameterized = nonzero,
zero = transitions$Z,
percentage = percent)
t2 = t2[order(t2$percentage, decreasing = FALSE),]
rownames(t2) = NULL
caption = paste0("Transition rates between kin terminologies in the ",
basename(f) %>% tools::file_path_sans_ext(),
" language family.")
print(
t2 %>%
kable(format = 'html',
caption = caption,
digits = 3) %>%
kable_styling(bootstrap_options = c("striped", "bordered"))
)
options(scipen=999)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warnings = FALSE)
library(knitr)
library(kableExtra)
library(stringr)
library(dplyr)
library(coda)
library(purrr)
#library(excdr)
library(psych)
library(ggplot2)
library(gridExtra)
library(tidyr)
library(reshape2)
library(bayestraitr)
source('processing/helper.R')
kincodes = read.csv('data/kincodes', header = FALSE)
format_change = 'html'
# get three runs of BayesTraits logs
files_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Log.txt")
files_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Log.txt")
# Get the corresponding runs of BayesTraits Stones
stones_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Stones.txt")
stones_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*Stones.txt")
stones_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Stones.txt")
i = 1
hypotheses = m$job[i] %>%
as.character()
mcmc = read.csv('analysis/coevo-settings.csv')
mcmc$scale.trees2 = ifelse(mcmc$scale.trees == "ScaleTrees", "Yes", "No")
m = mcmc %>%
select(job, prior.exp.value, scale.trees2,
iterations, sampling, burnin, posterior.size)
hypotheses = m$job[i] %>%
as.character()
# find the right files
# This is ithe dependent and independent models for each hypotheses
idx = str_detect(files_1, hypotheses)
f1 = files_1[idx]
idx = str_detect(files_2, hypotheses)
f2 = files_2[idx]
# get three runs of BayesTraits logs
files_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Log.txt")
files_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*.Log.txt")
files_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Log.txt")
# Get the corresponding runs of BayesTraits Stones
stones_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Stones.txt")
stones_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*Stones.txt")
stones_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Stones.txt")
hypotheses = m$job[i] %>%
as.character()
# find the right files
# This is ithe dependent and independent models for each hypotheses
idx = str_detect(files_1, hypotheses)
f1 = files_1[idx]
idx = str_detect(files_2, hypotheses)
f2 = files_2[idx]
idx = str_detect(files_3, hypotheses)
f3 = files_3[idx]
# load the files
logs = map(list(f1,f2,f3),
function(f) map(f, bt_read.log))
dep_transitions = map(logs, function(l){
l = l[[1]]
transition_cols = str_detect(colnames(l), "(^q)|(^(alpha|beta))")
#transition = l[,transition_cols] %>% colMeans()
transition = l[,transition_cols] %>% apply(., 2, median)
round(transition, 3)
})
indep_transitions = map(logs, function(l){
l = l[[2]]
transition_cols = str_detect(colnames(l), "(^q)|(^(alpha[1,2]|beta[1,2]))")
transition = l[,transition_cols] %>% apply(., 2, median)
round(transition, 3)
})
# find the right stones files
# this is one for the dependent and one for the independent model
idx = str_detect(stones_1, hypotheses)
indep_transitions = map(logs, function(l){
l = l[[2]]
transition_cols = str_detect(colnames(l), "(^q)|(^(alpha[1,2]|beta[1,2]))")
transition = l[,transition_cols] %>% apply(., 2, median)
round(transition, 3)
})
# find the right stones files
# this is one for the dependent and one for the independent model
idx = str_detect(stones_1, hypotheses)
s1_f = stones_1[idx]
idx = str_detect(stones_2, hypotheses)
s2_f = stones_2[idx]
idx = str_detect(stones_3, hypotheses)
s3_f = stones_3[idx]
s1 = lapply(s1_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
s2 = lapply(s2_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
s3 = lapply(s3_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
stone_logs = list(s1,s2,s3)
dep_table = data.frame(run = 1:3,
dependent.MLL = map_dbl(stone_logs, 1) %>% round(., 3),
dependent.transitions = do.call(rbind, dep_transitions)
)
indep_table = data.frame(independent.MLL = map_dbl(stone_logs, 2) %>% round(., 3),
independent.transitions = do.call(rbind, indep_transitions)
)
table = cbind(dep_table, indep_table)
table = rbind(table, round(colMeans(table), 3))
BF = 2 * (s1[[2]] - s1[[1]])
table[4,1] = "Mean"
table[5,] = c("BF", round(BF, 3), rep("", 13))
c.names = c("run", "MLL",
colnames(table)[3:10] %>% str_replace_all("dependent.transitions.", ""),
"MLL",
colnames(table)[12:15] %>% str_replace_all("independent.transitions.", "")
)
hypotheses
caption = hypotheses %>%
str_replace("-", " : ") %>%
str_replace("-", " <-> ") %>%
str_to_title()
i
caption = hypotheses %>%
str_replace("-", " : ") %>%
str_replace("-", " <-> ") %>%
paste("Table S", i, ": ", .) %>%
str_to_title()
caption
caption = hypotheses %>%
str_replace("-", " : ") %>%
str_replace("-", " <-> ") %>%
paste("Table S", i, ": ", ., sep = "") %>%
str_to_title()
caption
# get three runs of BayesTraits logs
files_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Log.txt")
files_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*.Log.txt")
files_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Log.txt")
# Get the corresponding runs of BayesTraits Stones
stones_1 = list.files('results/co-evolutionary/run-1/', full.names = TRUE,
pattern = "*.Stones.txt")
stones_2 = list.files('results/co-evolutionary/run-2/', full.names = TRUE,
pattern = "*Stones.txt")
stones_3 = list.files('results/co-evolutionary/run-3/', full.names = TRUE,
pattern = "*.Stones.txt")
for(i in seq_along(m$job)){
hypotheses = m$job[i] %>%
as.character()
# find the right files
# This is ithe dependent and independent models for each hypotheses
idx = str_detect(files_1, hypotheses)
f1 = files_1[idx]
idx = str_detect(files_2, hypotheses)
f2 = files_2[idx]
idx = str_detect(files_3, hypotheses)
f3 = files_3[idx]
# load the files
logs = map(list(f1,f2,f3),
function(f) map(f, bt_read.log))
#if(!all(map(logs, length) == 2)) next # still need to finish up some results
# skip for now.
dep_transitions = map(logs, function(l){
l = l[[1]]
transition_cols = str_detect(colnames(l), "(^q)|(^(alpha|beta))")
#transition = l[,transition_cols] %>% colMeans()
transition = l[,transition_cols] %>% apply(., 2, median)
round(transition, 3)
})
indep_transitions = map(logs, function(l){
l = l[[2]]
transition_cols = str_detect(colnames(l), "(^q)|(^(alpha[1,2]|beta[1,2]))")
transition = l[,transition_cols] %>% apply(., 2, median)
round(transition, 3)
})
# find the right stones files
# this is one for the dependent and one for the independent model
idx = str_detect(stones_1, hypotheses)
s1_f = stones_1[idx]
idx = str_detect(stones_2, hypotheses)
s2_f = stones_2[idx]
idx = str_detect(stones_3, hypotheses)
s3_f = stones_3[idx]
s1 = lapply(s1_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
s2 = lapply(s2_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
s3 = lapply(s3_f, bt_read.stones) %>%
lapply(., function(s) s$marginal_likelihood)
stone_logs = list(s1,s2,s3)
dep_table = data.frame(run = 1:3,
dependent.MLL = map_dbl(stone_logs, 1) %>% round(., 3),
dependent.transitions = do.call(rbind, dep_transitions)
)
indep_table = data.frame(independent.MLL = map_dbl(stone_logs, 2) %>% round(., 3),
independent.transitions = do.call(rbind, indep_transitions)
)
table = cbind(dep_table, indep_table)
table = rbind(table, round(colMeans(table), 3))
BF = 2 * (s1[[2]] - s1[[1]])
table[4,1] = "Mean"
table[5,] = c("BF", round(BF, 3), rep("", 13))
c.names = c("run", "MLL",
colnames(table)[3:10] %>% str_replace_all("dependent.transitions.", ""),
"MLL",
colnames(table)[12:15] %>% str_replace_all("independent.transitions.", "")
)
caption = hypotheses %>%
str_replace("-", " : ") %>%
str_replace("-", " <-> ") %>%
paste("Table S", i + 17, ": ", ., sep = "") %>%
str_to_title()
print(
table %>%
kable(format = format_change, col.names = c.names, caption = caption, digits = 3) %>%
kable_styling(bootstrap_options = c("striped", "bordered")) %>%
add_header_above(c(" " = 1, "Dependent" = 9, "Independent" = 5))
)
## gelman rubin diagnostics
if(all(lapply(logs, function(l) map(l, nrow)) %>% unlist())){
dep_logs = map(logs, 1)
dmcmc = mcmc.list(map(dep_logs, function(x) as.mcmc(x$Lh)))
d1 = gelman.diag(dmcmc)
indep_logs = map(logs, 2)
imcmc = mcmc.list(map(indep_logs, function(x) as.mcmc(x$Lh)))
d2 = gelman.diag(imcmc)
t2 = do.call(rbind, list(d1$psrf, d2$psrf))
rownames(t2) = c("Dependent", "Independent")
print(
t2 %>%
kable(format = format_change, caption = "Gelman-Rubin MCMC chain diagnostic test", digits = 3) %>%
kable_styling()
)
}
}
i
hypotheses
kincode
d = read.csv('data/kincodes')
d
